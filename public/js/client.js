document.addEventListener('DOMContentLoaded', () => {
    const socket = io({
        transports: ['websocket', 'polling'],
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        reconnectionAttempts: Infinity
    });

    // –î–µ–ª–∞–µ–º —Å–æ–∫–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
    window.socket = socket;
    
    let currentUser = null;
    let currentRoom = null;
    let isReconnecting = false;
    let quotedMessage = null;
    let messageHistory = [];
    let encryptionDebounceDelay = 500;
    let debounceTimer = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è socket
    window.webrtcManager = new WebRTCManager(socket);
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    window.decryptedFilesCache = {};

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Blob –≤ base64
    function blobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result.split(',')[1]);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è base64 –≤ Blob
    function base64ToBlob(base64, mimeType) {
        const byteCharacters = atob(base64);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        return new Blob([byteArray], {type: mimeType});
    }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞
window.decryptAndDisplayFile = async function(fileUrl, fileType, fileName, messageId, element) {
    try {
        console.log('–ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', fileName);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        element.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (window.decryptedFilesCache[fileUrl]) {
            console.log('–§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:', fileName);
            const cacheEntry = window.decryptedFilesCache[fileUrl];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            if (cacheEntry.encryptionKey === window.encryptionManager.encryptionKey) {
                if (cacheEntry.status === 'success') {
                    displayDecryptedFile(cacheEntry.blob, fileType, fileName, element);
                } else {
                    showDecryptionError(element, fileName);
                }
                return;
            } else {
                console.log('–ö–ª—é—á –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ');
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
                delete window.decryptedFilesCache[fileUrl];
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        if (!window.encryptionManager.encryptionKey) {
            console.log('–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –∫–ª—é—á–∞)');
            showDecryptionError(element, fileName);
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', fileUrl);
        const response = await fetch(fileUrl);
        const encryptedBlob = await response.blob();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ base64
        console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Blob –≤ base64');
        const encryptedBase64 = await blobToBase64(encryptedBlob);
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        console.log('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞');
        let decryptedBase64;
        try {
            decryptedBase64 = window.encryptionManager.decryptFile(encryptedBase64);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–º base64
        if (!isValidBase64(decryptedBase64)) {
            console.error('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º base64');
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Blob
        console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ base64 –≤ Blob');
        const decryptedBlob = base64ToBlob(decryptedBase64, fileType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ Blob –≤–∞–ª–∏–¥–Ω—ã–º
        if (decryptedBlob.size === 0) {
            console.error('–†–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–≤–µ–Ω 0');
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à:', fileName);
        window.decryptedFilesCache[fileUrl] = {
            blob: decryptedBlob,
            status: 'success',
            encryptionKey: window.encryptionManager.encryptionKey
        };
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∞–π–ª
        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', fileName);
        displayDecryptedFile(decryptedBlob, fileType, fileName, element);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', error);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∫–ª—é—á–∞
        if (error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è')) {
            window.decryptedFilesCache[fileUrl] = {
                status: 'error',
                encryptionKey: window.encryptionManager.encryptionKey,
                error: error.message
            };
        }
        
        showDecryptionError(element, fileName);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ base64 —Å—Ç—Ä–æ–∫–∏
function isValidBase64(str) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ
        return btoa(atob(str)) === str;
    } catch (e) {
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function showDecryptionError(element, fileName) {
    element.innerHTML = `
        <button class="encrypted-file-btn error">
            üîí –ö–ª—é—á –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π.
        </button>
        <div class="file-info">${fileName}</div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
window.retryDecryption = function(element) {
    const messageFileElement = element.closest('.message-file');
    const encryptedBtn = messageFileElement.querySelector('.encrypted-file-btn');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    encryptedBtn.innerHTML = 'üîí –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.';
    encryptedBtn.classList.remove('error');
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
    encryptedBtn.onclick = function() {
        const fileUrl = this.dataset.fileUrl;
        const fileType = this.dataset.fileType;
        const fileName = this.dataset.fileName;
        const messageId = this.dataset.messageId;
        window.decryptAndDisplayFile(fileUrl, fileType, fileName, messageId, this);
    };
};

function displayDecryptedFile(blob, fileType, fileName, element) {
    const url = URL.createObjectURL(blob);
    
    if (fileType.startsWith('image/')) {
        element.innerHTML = `
            <img src="${url}" alt="${fileName}" onclick="expandImage('${url}', '${fileType}')">
            <div class="file-size">${(blob.size / 1024).toFixed(2)} KB</div>
        `;
    } else if (fileType.startsWith('video/')) {
        element.innerHTML = `
            <video src="${url}" controls muted onclick="expandVideoWithSound('${url}')">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
            </video>
            <div class="file-size">${(blob.size / 1024).toFixed(2)} KB</div>
        `;
    } else if (fileType.startsWith('audio/')) {
        element.innerHTML = `
            <button class="audio-play-btn" onclick="window.audioRecorder.playAudioMessage('${url}', this)">
                üîä
            </button>
            <span class="audio-duration">${(blob.size / 1024).toFixed(2)} KB</span>
        `;
    } else {
        element.innerHTML = `
            <a href="${url}" download="${fileName}">
                üìÑ ${fileName}
            </a>
            <div class="file-size">${(blob.size / 1024).toFixed(2)} KB</div>
        `;
    }
}

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const loginModal = document.getElementById('loginModal');
    const usernameInput = document.getElementById('usernameInput');
    const roomInput = document.getElementById('roomInput');
    const passwordInput = document.getElementById('passwordInput');
    const joinChatBtn = document.getElementById('joinChatBtn');
    const loginError = document.getElementById('loginError');
    const userInfo = document.getElementById('userInfo');
    const roomInfo = document.getElementById('roomInfo');
    const usersList = document.getElementById('usersList');
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const fileInput = document.getElementById('fileInput');
    const recordVideoBtn = document.getElementById('recordVideoBtn');
    const fullscreenImage = document.getElementById('fullscreenImage');
    const expandedImage = document.getElementById('expandedImage');
    const closeFullscreen = document.querySelector('.close-fullscreen');
    const chatTitle = document.getElementById('chatTitle');
    const encryptionKeyInput = document.getElementById('encryptionKeyInput');
    const clearEncryptionKeyBtn = document.getElementById('clearEncryptionKey');
    
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª
    if (sendMessageBtn) {
        sendMessageBtn.textContent = ' ‚Üµ ';
        sendMessageBtn.title = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    window.showMessage = function(title, text) {
        const messageModal = document.getElementById('messageModal');
        const messageModalTitle = document.getElementById('messageModalTitle');
        const messageModalText = document.getElementById('messageModalText');
        const messageModalOkBtn = document.getElementById('messageModalOkBtn');
        
        messageModalTitle.textContent = title;
        messageModalText.textContent = text;
        messageModal.classList.remove('hidden');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ OK
        messageModalOkBtn.onclick = () => {
            messageModal.classList.add('hidden');
        };
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        messageModal.addEventListener('click', (e) => {
            if (e.target === messageModal) {
                messageModal.classList.add('hidden');
            }
        });
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const savedUsername = getCookie('chatUsername');
    if (savedUsername) {
        usernameInput.value = savedUsername;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    loginModal.classList.remove('hidden');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RTC –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('rtc-config', (rtcConfig) => {
        window.rtcConfig = rtcConfig;
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    socket.on('config', (config) => {
        if (config.encryptionDebounceDelay) {
            encryptionDebounceDelay = config.encryptionDebounceDelay;
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        isReconnecting = false;
        
        // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Ä–∞–Ω–µ–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        if (currentUser && currentRoom) {
            console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            socket.emit('user-join-attempt', {
                username: currentUser,
                room: currentRoom,
                password: localStorage.getItem('chatPassword') || 'pass'
            });
        }
    });

    socket.on('disconnect', (reason) => {
        console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
        isReconnecting = true;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        setTimeout(() => {
            if (isReconnecting) {
                console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                socket.connect();
            }
        }, 2000);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ killall —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('killall-message', (message) => {
        // –û—á–∏—â–∞–µ–º —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        messagesContainer.innerHTML = '';
        addMessageToChat(message);
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
            showMessage('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
            setTimeout(() => {
                location.reload();
            }, 2000);
        }, 3000);
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    joinChatBtn.addEventListener('click', () => {
        const username = usernameInput.value.trim();
        const room = roomInput.value.trim() || 'Room_01';
        const password = passwordInput.value.trim();
        
        if (username && password) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ cookie
            setCookie('chatUsername', username, 30);
            localStorage.setItem('chatPassword', password);
            socket.emit('user-join-attempt', { username, room, password });
        } else {
            showLoginError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    socket.on('join-error', (error) => {
        showLoginError(error);
    });
    
    function showLoginError(message) {
        loginError.textContent = message;
        loginError.style.display = 'block';
    }
    
    // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('user-joined', (data) => {
        currentUser = data.username;
        currentRoom = data.room;
        
        userInfo.textContent = currentUser;
        roomInfo.textContent = `–ö–æ–º–Ω–∞—Ç–∞: ${currentRoom}`;
        chatTitle.textContent = `–ß–∞—Ç –∫–æ–º–Ω–∞—Ç—ã: ${currentRoom}`;
        
        loginModal.classList.add('hidden');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messagesContainer.innerHTML = '';
        messageHistory = data.messageHistory || [];
        messageHistory.forEach(message => addMessageToChat(message));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
        addCallButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        setupMessageQuoting();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        setupEncryptionKeyHandler();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    socket.on('clear-chat', () => {
        messagesContainer.innerHTML = '';
        messageHistory = [];
        addSystemMessage('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('new-message', (message) => {
        messageHistory.push(message);
        addMessageToChat(message);
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    function addSystemMessage(text) {
        const message = {
            id: Date.now().toString(),
            username: '–°–∏—Å—Ç–µ–º–∞',
            userId: 'system',
            text: text,
            timestamp: new Date(),
            isSystem: true
        };
        messageHistory.push(message);
        addMessageToChat(message);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    function addMessageToChat(message) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.dataset.messageId = message.id;
        messageElement.dataset.messageUsername = message.username;
        
        if (message.isSystem) {
            messageElement.classList.add('system-message');
        }
        
        if (message.isKillAll) {
            messageElement.classList.add('killall-message');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—à–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const isMyMessage = message.userId === socket.id;
        if (!message.isSystem && !message.isKillAll) {
            messageElement.classList.add(isMyMessage ? 'my-message' : 'other-message');
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const time = new Date(message.timestamp).toLocaleTimeString();
        
        let messageContent = `
            <div class="message-info">
                <span class="message-sender">${message.username}</span>
                <span class="message-time">${time}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (message.quote) {
            let quoteText = message.quote.text;
            let quoteUsername = message.quote.username;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–∏—Ç–∞—Ç—É (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (message.quote.isEncrypted) {
                if (window.encryptionManager.encryptionKey) {
                    try {
                        quoteText = window.encryptionManager.decryptMessage(quoteText);
                    } catch (error) {
                        quoteText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
                    }
                } else {
                    quoteText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
                }
            }
            
            messageContent += `
                <div class="message-quote">
                    <div class="quote-username">${quoteUsername}</div>
                    <div class="quote-text">${quoteText}</div>
                </div>
            `;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        let messageText = message.text;
        let isEncryptedMessage = message.isEncrypted;
        
        if (isEncryptedMessage) {
            if (window.encryptionManager.encryptionKey) {
                try {
                    messageText = window.encryptionManager.decryptMessage(messageText);
                } catch (error) {
                    messageText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
                }
            } else {
                messageText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
            }
        }
        
       if (message.isFile) {
        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç–µ:', message.fileName, '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω:', message.isEncrypted);
        
        if (message.isEncrypted) {
            // –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
            messageContent += `
                <div class="message-file">
                    <button class="encrypted-file-btn" 
                            onclick="decryptAndDisplayFile('${message.fileUrl}', '${message.fileType}', '${message.fileName}', '${message.id}', this)"
                            data-file-url="${message.fileUrl}"
                            data-file-type="${message.fileType}"
                            data-file-name="${message.fileName}"
                            data-message-id="${message.id}">
                        üîí –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.
                    </button>
                    <div class="file-info">${message.fileName} (${message.fileSize})</div>
                </div>
            `;
        } else {
                // –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (message.isAudio) {
                    messageContent += `
                        <div class="message-audio">
                            <button class="audio-play-btn" onclick="window.audioRecorder.playAudioMessage('${message.fileUrl}', this)">
                                üîä
                            </button>
                            <span class="audio-duration">${message.duration} —Å–µ–∫ ‚Ä¢ ${message.fileSize}</span>
                        </div>
                    `;
                } else if (message.fileType.startsWith('image/')) {
                    if (message.fileType === 'image/gif') {
                        messageContent += `
                            <div class="message-file">
                                <img src="${message.fileUrl}" alt="${message.fileName}" 
                                     onclick="expandImage('${message.fileUrl}', '${message.fileType}')">
                                <div class="file-size">${message.fileSize}</div>
                            </div>
                        `;
                    } else {
                        messageContent += `
                            <div class="message-file">
                                <img src="${message.fileUrl}" alt="${message.fileName}" 
                                     onclick="expandImage('${message.fileUrl}', '${message.fileType}')">
                                <div class="file-size">${message.fileSize}</div>
                            </div>
                        `;
                    }
                } else if (message.fileType.startsWith('video/')) {
                    messageContent += `
                        <div class="message-file">
                            <video src="${message.fileUrl}" controls muted 
                                   onclick="expandVideoWithSound('${message.fileUrl}')">
                                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                            </video>
                            <div class="file-size">${message.duration} —Å–µ–∫ ‚Ä¢ ${message.fileSize}</div>
                        </div>
                    `;
                } else {
                    messageContent += `
                        <div class="message-file">
                            <a href="${message.fileUrl}" download="${message.fileName}">
                                üìÑ ${message.fileName}
                            </a>
                            <div class="file-size">${message.fileSize}</div>
                        </div>
                    `;
                }
            }
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messageContent += `<div class="message-text">${messageText}</div>`;
        }
        
        messageElement.innerHTML = messageContent;
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    socket.on('users-list', (users) => {
        usersList.innerHTML = '';
        users.forEach(user => {
            if (user.username !== currentUser) {
                const userElement = document.createElement('div');
                userElement.classList.add('user-item');
                userElement.textContent = user.username;
                usersList.appendChild(userElement);
            }
        });
    });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('user-joined-room', (user) => {
        addSystemMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`);
    });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('user-left-room', (user) => {
        addSystemMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç–µ`);
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    window.expandImage = function(imageUrl, fileType) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        expandedImage.innerHTML = '';
        
        if (fileType === 'image/gif') {
            // –î–ª—è GIF –∏—Å–ø–æ–ª—å–∑—É–µ–º img —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            const img = document.createElement('img');
            img.src = imageUrl;
            img.alt = '–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            img.style.maxWidth = '90%';
            img.style.maxHeight = '90%';
            img.style.objectFit = 'contain';
            expandedImage.appendChild(img);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const img = document.createElement('img');
            img.src = imageUrl;
            img.alt = '–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            img.style.maxWidth = '90%';
            img.style.maxHeight = '90%';
            img.style.objectFit = 'contain';
            expandedImage.appendChild(img);
        }
        
        fullscreenImage.style.display = 'flex';
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ
    window.expandVideo = function(videoUrl) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        expandedImage.innerHTML = '';
        
        const video = document.createElement('video');
        video.src = videoUrl;
        video.controls = true;
        video.autoplay = true;
        video.loop = true;
        video.style.maxWidth = '90%';
        video.style.maxHeight = '90%';
        video.style.objectFit = 'contain';
        expandedImage.appendChild(video);
        fullscreenImage.style.display = 'flex';
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–æ –∑–≤—É–∫–æ–º
        video.muted = false;
        video.play();
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ —Å–æ –∑–≤—É–∫–æ–º
    window.expandVideoWithSound = function(videoUrl) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        expandedImage.innerHTML = '';
        
        const video = document.createElement('video');
        video.src = videoUrl;
        video.controls = true;
        video.autoplay = true;
        video.style.maxWidth = '90%';
        video.style.maxHeight = '90%';
        video.style.objectFit = 'contain';
        expandedImage.appendChild(video);
        fullscreenImage.style.display = 'flex';
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–æ –∑–≤—É–∫–æ–º
        video.muted = false;
        video.play();
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    closeFullscreen.addEventListener('click', () => {
        fullscreenImage.style.display = 'none';
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        const videoElement = expandedImage.querySelector('video');
        if (videoElement) {
            videoElement.pause();
        }
        
        // –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é GIF
        // –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fullscreenImage.addEventListener('click', (e) => {
        if (e.target === fullscreenImage) {
            fullscreenImage.style.display = 'none';
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            const videoElement = expandedImage.querySelector('video');
            if (videoElement) {
                videoElement.pause();
            }
        }
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    sendMessageBtn.addEventListener('click', sendMessage);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è keypress –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    usernameInput.addEventListener('keypress', handleEnterKeyPress);
    roomInput.addEventListener('keypress', handleEnterKeyPress);
    passwordInput.addEventListener('keypress', handleEnterKeyPress);

    function handleEnterKeyPress(e) {
        if (e.key === 'Enter') {
            joinChatBtn.click();
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (50 –ú–ë)
        if (file.size > 50 * 1024 * 1024) {
            addSystemMessage(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë`);
            fileInput.value = '';
            return;
        }
        
        const reader = new FileReader();
        reader.onload = async function(event) {
            let fileData = event.target.result.split(',')[1];
            let isEncrypted = false;
            
            console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–¢–∏–ø:', file.type);
            
            // –®–∏—Ñ—Ä—É–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á
            if (window.encryptionManager && window.encryptionManager.encryptionKey) {
                try {
                    console.log('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
                    fileData = window.encryptionManager.encryptFile(fileData);
                    isEncrypted = true;
                    console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
                }
            } else {
                console.log('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            socket.emit('send-file', {
                fileName: file.name,
                fileType: file.type,
                fileData: fileData,
                isEncrypted: isEncrypted
            }, (response) => {
                if (response && response.error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', response.error);
                    addSystemMessage(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}: ${response.error}`);
                } else {
                    console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', file.name);
                }
            });
        };
        
        reader.onerror = function() {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', file.name);
            addSystemMessage(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${file.name}`);
            fileInput.value = '';
        };
        
        reader.readAsDataURL(file);
        fileInput.value = '';
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage() {
        const text = messageInput.value.trim();
        if (text) {
            let messageData = { text };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (quotedMessage) {
                messageData.quote = {
                    username: quotedMessage.username,
                    text: quotedMessage.text,
                    isEncrypted: false
                };
                
                // –®–∏—Ñ—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á
                if (window.encryptionManager && window.encryptionManager.encryptionKey) {
                    try {
                        messageData.quote.text = window.encryptionManager.encryptMessage(quotedMessage.text);
                        messageData.quote.isEncrypted = true;
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
                        messageData.quote.isEncrypted = false;
                    }
                }
            }
            
            // –®–∏—Ñ—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á
            if (window.encryptionManager && window.encryptionManager.encryptionKey) {
                try {
                    messageData.text = window.encryptionManager.encryptMessage(text);
                    messageData.isEncrypted = true;
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
                    messageData.isEncrypted = false;
                }
            }
            
            socket.emit('send-message', messageData);
            messageInput.value = '';
            cancelQuote();
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    function setQuotedMessage(messageElement, messageData) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const previousQuoted = document.querySelector('.message.quoted');
        if (previousQuoted) {
            previousQuoted.classList.remove('quoted');
        }
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messageElement.classList.add('quoted');
        quotedMessage = {
            id: messageData.id,
            username: messageData.username,
            text: messageData.text
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã
        showQuoteBlock();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞ —Ü–∏—Ç–∞—Ç—ã
    function showQuoteBlock() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldQuoteBlock = document.querySelector('.quote-block');
        if (oldQuoteBlock) {
            oldQuoteBlock.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã
        const quoteBlock = document.createElement('div');
        quoteBlock.className = 'quote-block';
        
        let quoteText = quotedMessage.text;
        let quoteUsername = quotedMessage.username;
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞
        if (window.encryptionManager && window.encryptionManager.encryptionKey) {
            try {
                quoteText = window.encryptionManager.decryptMessage(quoteText);
            } catch (error) {
                quoteText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
            }
        } else {
            quoteText = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è";
        }
        
        quoteBlock.innerHTML = `
            <div class="quote-content">
                <div class="quote-username">${quoteUsername}</div>
                <div class="quote-text">${quoteText}</div>
            </div>
            <button class="cancel-quote">‚úï</button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const messageInputContainer = document.querySelector('.message-input-container');
        messageInputContainer.parentNode.insertBefore(quoteBlock, messageInputContainer);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        quoteBlock.querySelector('.cancel-quote').addEventListener('click', () => {
            cancelQuote();
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function cancelQuote() {
        quotedMessage = null;
        const quoteBlock = document.querySelector('.quote-block');
        if (quoteBlock) {
            quoteBlock.remove();
        }
        
        const quotedElement = document.querySelector('.message.quoted');
        if (quotedElement) {
            quotedElement.classList.remove('quoted');
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    function setupMessageQuoting() {
        messagesContainer.addEventListener('click', (e) => {
            const messageElement = e.target.closest('.message');
            if (!messageElement || messageElement.classList.contains('system-message') || 
                messageElement.classList.contains('killall-message')) {
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            const messageId = messageElement.dataset.messageId;
            const messageUsername = messageElement.dataset.messageUsername;
            const messageText = messageElement.querySelector('.message-text')?.textContent || '';
            
            setQuotedMessage(messageElement, {
                id: messageId,
                username: messageUsername,
                text: messageText
            });
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–≤–æ–Ω–∫–æ–≤
    function addCallButtons() {
        const chatHeader = document.querySelector('.chat-header');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldAudioBtn = document.getElementById('audioCallBtn');
        const oldVideoBtn = document.getElementById('videoCallBtn');
        if (oldAudioBtn) oldAudioBtn.remove();
        if (oldVideoBtn) oldVideoBtn.remove();
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
        const audioCallBtn = document.createElement('button');
        audioCallBtn.id = 'audioCallBtn';
        audioCallBtn.className = 'call-btn';
        audioCallBtn.innerHTML = 'üìû';
        audioCallBtn.title = '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫';
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
        const videoCallBtn = document.createElement('button');
        videoCallBtn.id = 'videoCallBtn';
        videoCallBtn.className = 'call-btn';
        videoCallBtn.innerHTML = 'üìπ';
        videoCallBtn.title = '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        const callButtonsContainer = document.createElement('div');
        callButtonsContainer.className = 'call-buttons';
        callButtonsContainer.appendChild(audioCallBtn);
        callButtonsContainer.appendChild(videoCallBtn);
        
        chatHeader.appendChild(callButtonsContainer);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–≤–æ–Ω–∫–æ–≤
        audioCallBtn.addEventListener('click', () => {
            if (window.webrtcManager) {
                window.webrtcManager.showUserSelectionModal('audio');
            } else {
                console.error('WebRTCManager not initialized');
            }
        });
        
        videoCallBtn.addEventListener('click', () => {
            if (window.webrtcManager) {
                window.webrtcManager.showUserSelectionModal('video');
            } else {
                console.error('WebRTCManager not initialized');
            }
        });
    }
    
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function setupEncryptionKeyHandler() {
    if (!encryptionKeyInput) return;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    function updateClearButtonVisibility() {
        if (clearEncryptionKeyBtn) {
            if (encryptionKeyInput.value) {
                clearEncryptionKeyBtn.style.display = 'flex';
            } else {
                clearEncryptionKeyBtn.style.display = 'none';
            }
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    updateClearButtonVisibility();
    
    encryptionKeyInput.addEventListener('input', (e) => {
        const key = e.target.value;
        if (window.encryptionManager) {
            window.encryptionManager.setEncryptionKey(key);
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞
            window.decryptedFilesCache = {};
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
            updateClearButtonVisibility();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            const encryptedFileButtons = document.querySelectorAll('.encrypted-file-btn.error');
            encryptedFileButtons.forEach(button => {
                button.classList.remove('error');
                button.textContent = 'üîí –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.';
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                const fileUrl = button.dataset.fileUrl;
                const fileType = button.dataset.fileType;
                const fileName = button.dataset.fileName;
                const messageId = button.dataset.messageId;
                
                button.onclick = function() {
                    window.decryptAndDisplayFile(fileUrl, fileType, fileName, messageId, this);
                };
            });
            
            // Debounce –ø–µ—Ä–µ—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (window.encryptionManager.debounce) {
                window.encryptionManager.debounce(() => {
                    reDecryptAllMessages();
                }, encryptionDebounceDelay);
            } else {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    reDecryptAllMessages();
                }, encryptionDebounceDelay);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–ª—é—á–∞
    if (clearEncryptionKeyBtn) {
        clearEncryptionKeyBtn.addEventListener('click', () => {
            encryptionKeyInput.value = '';
            if (window.encryptionManager) {
                window.encryptionManager.setEncryptionKey('');
            }
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            window.decryptedFilesCache = {};
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
            updateClearButtonVisibility();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            const encryptedFileButtons = document.querySelectorAll('.encrypted-file-btn.error');
            encryptedFileButtons.forEach(button => {
                button.classList.remove('error');
                button.textContent = 'üîí –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.';
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                const fileUrl = button.dataset.fileUrl;
                const fileType = button.dataset.fileType;
                const fileName = button.dataset.fileName;
                const messageId = button.dataset.messageId;
                
                button.onclick = function() {
                    window.decryptAndDisplayFile(fileUrl, fileType, fileName, messageId, this);
                };
            });
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            reDecryptAllMessages();
        });
    }
}
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    function reDecryptAllMessages() {
        messagesContainer.innerHTML = '';
        messageHistory.forEach(message => {
            addMessageToChat(message);
        });
    }
});